name: Build docker image

on:
  workflow_dispatch:
  push:
    tags:
      - "*"

jobs:
  deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        image-name:
          - app

    env:
      IMAGE_NAME: ${{ matrix.image-name }}

    steps:
      - uses: actions/checkout@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Get the latest tag version
        id: get-version
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo $VERSION
          echo ::set-output name=VERSION::$VERSION

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          target: production
          context: ./web/next.js
          build-args: |
            NODE_ENV=production
          tags: |
            yadi-app:${{ steps.get-version.outputs.VERSION }}
            yadi-app:latest
            ghcr.io/kachar/yadi-app:${{ steps.get-version.outputs.VERSION }}
            ghcr.io/kachar/yadi-app:latest

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      # - name: Build web
      #   id: build-web
      #   if: ${{ matrix.image-name == 'web' }}
      #   working-directory: ./web/next.js
      #   run: |
      #     docker build \
      #       --file ./Dockerfile \
      #       --target production \
      #       --build-arg NODE_ENV=production \
      #       --tag $IMAGE_NAME \
      #       --tag $IMAGE_NAME:ci-run \
      #       .

      # - name: Push image to GitHub Container Registry
      #   id: push-images-container-registry
      #   run: |
      #     IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME

      #     # Change all uppercase to lowercase
      #     IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
      #     VERSION=${{ steps.get-version.outputs.VERSION }}

      #     echo IMAGE_ID=$IMAGE_ID
      #     echo VERSION=$VERSION

      #     docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
      #     docker push $IMAGE_ID:$VERSION

      # - name: Create Sentry Release
      #   env:
      #     SENTRY_RELEASE: ${{ steps.get-version.outputs.VERSION }}
      #   run: |
      #     # Install Sentry CLI
      #     curl -sL https://sentry.io/get-cli/ | bash

      #     # Create new Sentry release
      #     # export SENTRY_RELEASE=$(sentry-cli releases propose-version)
      #     sentry-cli releases new -p $SENTRY_PROJECT $SENTRY_RELEASE
      #     sentry-cli releases set-commits --auto $SENTRY_RELEASE
      #     sentry-cli releases finalize $SENTRY_RELEASE

      #     # Create new deploy for this Sentry release
      #     sentry-cli releases deploys $SENTRY_RELEASE new -e $SENTRY_DEPLOY_ENVIRONMENT
